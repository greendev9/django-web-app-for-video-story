"""
Django settings for skigit_project project.

Generated by 'django-admin startproject' using Django 1.11.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from datetime import timedelta
import firebase_admin
from firebase_admin import credentials

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SITE_ID = 2

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=0))

PROD = int(os.environ.get("PROD", default=0))

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")

HOST = os.environ.get("HOST", "https://www.skigit.com/"),
WWW_HOST = os.environ.get("WWW_HOST", "https://www.skigit.com/"),

SOCIAL_AUTH_REDIRECT_IS_HTTPS = True

# CSRF_USE_SESSIONS = False
# CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True 
SESSION_COOKIE_HTTPONLY = True

CLIENT_SECRETS_FILE = 'client_secret.json'

# Application definition

INSTALLED_APPS = [
    'django_summernote',
    'django_cleanup.apps.CleanupConfig',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'grappelli.dashboard',
    'grappelli',
    'constance',
    'django.contrib.admin',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',

    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',

    'allauth',
    'allauth.account',
    'rest_auth.registration',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.twitter',
    'instagram',
    'allauth.socialaccount.providers.linkedin_oauth2',
    'allauth.socialaccount.providers.yahoo',

    'sorl.thumbnail',
    'el_pagination',
    'meta',
    'notifications',
    'compressor',
    'daterange_filter',
    'django_user_agents',
    'django_celery_beat',

    'core',
    'user',
    'sperks',
    'social',
    'friends',
    'invoices',
    'skigit',
    'mailpost',
    'fcm_django',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'core.middleware.JSONMiddleware',
    'active_users.middleware.ActiveUsersSessionMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
    'core.middleware.MobileLandingPageRedirectMiddleware'
]

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

ROOT_URLCONF = 'skigit_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR + '/templates/', BASE_DIR + '/templates_orig/',],
        # 'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.request',
                'core.context_processors.common_context'
            ],
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
                'admin_tools.template_loaders.Loader',
            ]
        },
    },
]

AUTHENTICATION_BACKENDS = (
    # 'social.backends.facebook.FacebookOAuth2',
    # 'social.backends.google.GoogleOAuth2',
    # 'social.backends.google.GooglePlusAuth',
    # 'social.backends.twitter.TwitterOAuth',
    # 'social.backends.yahoo.YahooOpenId',
    # 'social.backends.linkedin.LinkedinOAuth2',
    'django.contrib.auth.backends.ModelBackend',
    'core.backends.EmailOrUsernameModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

WSGI_APPLICATION = 'skigit_project.wsgi.application'

DATABASES = {
    'default': {
        "ENGINE": os.environ.get("DB_ENGINE", "django.db.backends.postgresql_psycopg2"),
        "NAME": os.environ.get("DB_NAME", "skigit_2"),
        "USER": os.environ.get("DB_USER", "postgres"),
        "PASSWORD": os.environ.get("DB_PASSWORD", "postgres"),
        "HOST": os.environ.get("DB_HOST", "db"),
        "PORT": os.environ.get("DB_PORT", "5432")
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
MEDIA_ROOT = (
    BASE_DIR + '/media/'
)

STATIC_ROOT = BASE_DIR + '/static/'

STATIC_URL = os.environ.get("STATIC_URL", "/static/")
MEDIA_URL = os.environ.get("MEDIA_URL", "/media/")

COMPRESS_ENABLED = True
COMPRESS_CSS_FILTERS = ['compressor.filters.css_default.CssAbsoluteFilter',  'compressor.filters.cssmin.CSSMinFilter']
COMPRESS_URL = STATIC_URL
#COMPRESS_OFFLINE = True

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

EMAIL_HOST_VIDEO = 'video@skigit.com'
EMAIL_HOST_BUSINESS = 'sperks@skigit.com'
EMAIL_HOST_REPORT_BUG = 'bugs@skigit.com'
EMAIL_HOST_COPYRIGHT = 'copyright@skigit.com'
EMAIL_HOST_PAYMENT = 'invoice@skigit.com'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.zoho.com')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'accounts@skigit.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'ajjjeey')
EMAIL_PORT = 587
EMAIL_USE_TLS = True

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'simple',
            'filename': 'logs/debug.log',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            # 'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django': {
            'handlers': ['file'],
            'propagate': True,
            'level': 'INFO',
        }
    }
}

# config for meta data
META_SITE_DOMAIN = "skigit.com"
META_SITE_TYPE = "website"
META_SITE_NAME = "Skigit"
# META_IMAGE_URL = "https://static.skigit.com/images/logo.png"
META_USE_OG_PROPERTIES = True
META_USE_TWITTER_PROPERTIES = True
META_USE_GOOGLEPLUS_PROPERTIES = True
META_SITE_PROTOCOL = 'http'

GENERAL_USER = 'General User'
BUSINESS_USER = 'Business User'
SKIGIT_ADMIN = "Skigit Admin User"

BRAINTREE_MERCHANT_ID = os.environ.get('BRAINTREE_MERCHANT_ID', 'br_merch_id')
BRAINTREE_PUBLIC_KEY = os.environ.get('BRAINTREE_PUBLIC_KEY', 'br_merch_pub_key')
BRAINTREE_PRIVATE_KEY = os.environ.get('BRAINTREE_PRIVATE_KEY', 'br_merch_priv_key')

ADMIN_TOOLS_MENU = 'skigitmenu.SkigitMenu'

# WYSIWYG Editor in Admin: https://github.com/summernote/django-summernote
SUMMERNOTE_CONFIG = {
    'codemirror': {
        'mode': 'htmlmixed',
        'lineNumbers': 'true',
    },
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://redis:6379/1",
        "TIMEOUT": 300,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

SESSION_CACHE_ALIAS = "default"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    #'DEFAULT_PERMISSION_CLASSES': (
    #    'rest_framework.permissions.IsAuthenticated',
    #),
    'EXCEPTION_HANDLER': 'core.utils.custom_exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1)
}
CONSTANCE_CONFIG = {
    'SENT_MONTHLY_INVOICE': (True, 'Set this flag as True to send monthly invoice to  '
                                    'business owners.',),
    'VIDEOS_AUTO_APPROVAL': (True, 'Disable this flag to approve videos in admin end.'
                                    'Enable this flag to approve videos automatically without admin approval.'),
    'FEE_SKIGIT_VIEW': (0.08, 'To view Skigits'),
    'FEE_MAIN_SKIGIT_VIEW': (0.08, 'To view Skigits(home page)'),
    'FEE_SKIGIT_PLUGIN': (0.29, 'To plugin Skigits'),
    'FEE_SOCIAL_NETWORK_POST': (0.79, 'To post social networks'),
    'FEE_SKIGIT_SHARE': (0.49, 'To share Skigits'),
    'FEE_LOGO_CLICK': (0.29, 'To click logo(PPC)'),
    'FEE_LEARN_MORE': (0.12, 'To learn more'),
    'FEE_WEBSITE_LINKS_CLICK': (1.99, 'To click website links'),
    'FEE_SKIGIT_EMBED_MY_SITE': (49.0, 'To embed skigit(My Site)'),
    'FEE_SKIGIT_INTERNEL_EMBED': (25.0, 'To embed skigit(Profile page)'),
    'FEE_BUSINESS_SKIGIT_LOGO_MONTHLY': (0.0, 'Skigit logo monthly'),
    'FEE_BUSINESS_SKIGIT_MONTHLY_MAINTENANCE': (0.0, 'Skigit monthly maintenance'),
    'AUTO_DELETE_VIDEO': (True, 'Permanenlty delete temporarily deleted or rejected videos after 30 days'),
    'QR_CODE_SCAN': (0.19, 'QR Code Scan'),
    'DAYS_COUNT_FOR_AUTO_DELETE_BOT': (30, 'Filter in days')
}

ATOMIC_REQUESTS = True

# all auth settings
LOGIN_REDIRECT_URL = '/'

SOCIALACCOUNT_PROVIDERS = {
    'linkedin': {
        'SCOPE': [
            'r_basicprofile',
            'r_emailaddress'
        ],
        'PROFILE_FIELDS': [
            'id',
            'first-name',
            'last-name',
            'email-address',
            'picture-url',
            'public-profile-url',
        ]

    },
    'facebook': {
        'METHOD': 'oauth2',
        'SCOPE': ['email', 'public_profile'],
        'FIELDS': [
            'id',
            'email',
            'name',
            'first_name',
            'last_name',
            'picture'
        ],
        'VERSION': 'v3.3',
    },
    'instagram':{
        'SCOPE':['user_profile'],
    }

}

# Redis
#CONSTANCE_REDIS_CONNECTION = 'redis://:Swkii8gti8t5!@127.0.0.1:6379/0'
CONSTANCE_REDIS_CONNECTION = 'redis://redis:6379/0'

BACKBLAZE_KEY_ID = os.environ.get('BACKBLAZE_KEY_ID', 'bckblaze_key')
BACKBLAZE_APPLICATION_KEY = os.environ.get('BACKBLAZE_APPLICATION_KEY', 'bckblaze_app_key')
BACKBLAZE_BUCKET = 'skigitvideos'
BACKBLAZE_CACHE_EXPIRES = 604800
BACKBLAZE_URL = 'https://f002.backblazeb2.com/file/skigitvideos/'


# Active online Users
ACTIVE_USERS_KEY_EXPIRE = 20

# Deeplinking identifier
DEEPLINK_CATEGORY = 'SKIGIT'

## Social Account settings
ACCOUNT_EMAIL_VERIFICATION = "none"
#ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
#ACCOUNT_USER_MODEL_USERNAME_FIELD = 'email'

SOCIALACCOUNT_ADAPTER = 'skigit.socialaccountadapter.MySocialAccountAdapter'

NOTIFICATION_EXPIRATION_DAYS = 30

# Deeplinking identifier
IOS_APP_STORE_ID = os.environ.get('IOS_APP_STORE_ID', 12345678)
IOS_APP_STORE_NAME = "skigit"
#IOS_APP_SCHEME = "skigit"
IOS_APP_SCHEME = "https"
IOS_APP_HOST = os.environ.get("MOBILE_HOST", "www.skigit.com"),

ANDROID_APP_PACKAGE = "com.skigit"
ANDROID_APP_HOST = os.environ.get("MOBILE_HOST", "www.skigit.com")
ANDROID_APP_SCHEME = "https"
ANDROID_APP_PATH_PREFIX = "referal?"

FCM_DJANGO_SETTINGS = {
    "FCM_SERVER_KEY": os.environ.get('FCM_SERVER_KEY', '')
}

DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880

GRAPPELLI_ADMIN_TITLE = 'Skigit Administrator'
GRAPPELLI_INDEX_DASHBOARD = 'core.dashboard.CustomIndexDashboard'

FACEBOOK_APP_ID = os.environ.get('FACEBOOK_APP_ID', 1234568899)

USE_X_FORWARDED_HOST = True

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

STATIC_HOST_URL = STATIC_URL if PROD else '{0}/static/'.format(''.join(HOST)[:-1])
MEDIA_HOST_URL = MEDIA_URL if PROD else '{0}/media/'.format(''.join(HOST)[:-1])

EL_PAGINATION_PER_PAGE = 8
EL_PAGINATION_LOADING = "<img src='{}images/inf_loading.gif' alt='loading' />".format(STATIC_HOST_URL)

DEV_HOST = 'https://dev.skigit.com'

# local settings
try:
    from skigit_project.local_settings import *
except ImportError:
    pass

try:
    cred = credentials.Certificate(os.path.join(BASE_DIR, 'firebase_credentials.json'))
    firebase_admin.initialize_app(cred)
except:
    pass


ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"

TWILIO_ACCOUNT_SID=os.environ.get("TWILIO_ACCOUNT_SID", "")
TWILIO_AUTH_TOKEN=os.environ.get("TWILIO_AUTH_TOKEN", "")
MESSAGING_SERVICE_SID=os.environ.get("MESSAGING_SERVICE_SID", "")